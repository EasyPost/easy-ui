@use "string-functions" as string;

/// Helper for referencing design tokens consistently in CSS modules.
///
/// To use a design token:
/// color: design-token("color.blue.800");
@function design-token($tokenName) {
  $cleanedName: string.clean-name($tokenName);
  @return var(--ezui-#{$cleanedName});
}

/// Helper for referencing theme tokens consistently in CSS modules.
///
/// To use a theme token:
/// color: theme-token("color.primary.800");
@function theme-token($tokenName) {
  $cleanedName: string.clean-name($tokenName);
  @return var(--ezui-theme-#{$cleanedName});
}

/// Helpers for referencing tokens in components in a structured way. Supports
/// a consistent naming between CSS and JS.
///
/// To define a component token:
/// @include component-token("text", "color", inherit);
///
/// To use a component token:
/// color: component-token("text", "color");
///
/// See utilities/css.ts for using component tokens in JS
@mixin component-token($componentName, $componentProp, $value) {
  $cleanedComponentName: string.clean-name($componentName);
  $cleanedComponentProp: string.clean-name($componentProp);
  --ezui-c-#{$cleanedComponentName}-#{$cleanedComponentProp}: #{$value};
}

@function component-token($componentName, $componentProp) {
  $cleanedComponentName: string.clean-name($componentName);
  $cleanedComponentProp: string.clean-name($componentProp);
  @return var(--ezui-c-#{$cleanedComponentName}-#{$cleanedComponentProp});
}
