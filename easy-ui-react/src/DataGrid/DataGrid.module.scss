/* stylelint-disable no-descending-specificity */
/* stylelint-disable scss/operator-no-newline-after */

@use "../styles/common" as *;
@use "../styles/unstyled";

.DataGrid {
  @include component-token(
    "data-grid",
    "header-bg",
    design-token("color.blue.800")
  );
  @include component-token(
    "data-grid",
    "header-text",
    design-token("color.white")
  );
  @include component-token("data-grid", "header-row-height", 48px);
  @include component-token("data-grid", "body-row-height", 56px);
  @include component-token("data-grid", "expand-btn-size", 24px);
  @include component-token(
    "data-grid",
    "sort-icon-color",
    design-token("color.gray.500")
  );
  @include component-token(
    "data-grid",
    "border-width",
    design-token("shape.border_width.1")
  );
  @include component-token(
    "data-grid",
    "border-color",
    design-token("color.gray.300")
  );
  @include component-token("data-grid", "sticky-shadow-size", 8px);
  @include component-token("data-grid", "sticky-shadow-opacity", 0.5);
  @include component-token(
    "data-grid",
    "sticky-shadow-color",
    design-token("color.gray.500")
  );
  @include component-token("data-grid", "cell-bg", design-token("color.white"));
  @include component-token(
    "data-grid",
    "cell-text",
    design-token("color.blue.800")
  );
  @include component-token("data-grid", "cell-z-index", 1);
  @include component-token("data-grid", "cell-stuck-z-index", 2);
  @include component-token("data-grid", "column-z-index", 3);
  @include component-token("data-grid", "column-stuck-z-index", 4);
  @include component-token("data-grid", "sticky-left-offset", -16px);
  @include component-token("data-grid", "sticky-right-offset", -12px);

  border: component-token("data-grid", "border-width") solid
    component-token("data-grid", "border-color");
  border-radius: design-token("shape.border_radius.md");
  max-height: calc(
    (component-token("data-grid", "border-width") * 2) +
      (
        component-token("data-grid", "header-row-height") +
          (
            component-token("data-grid", "body-row-height") *
              component-token("data-grid", "max-rows")
          )
      )
  );
  overflow: auto;
  position: relative;
}

.contents {
  display: contents;
}

.table {
  position: relative;
  min-width: min-content;
  display: grid;
  grid-template-rows: auto;
  grid-template-areas: component-token("data-grid", "template-areas");
  grid-template-columns: component-token("data-grid", "template-columns");
}

.headerSecondary {
  @include component-token(
    "data-grid",
    "header-bg",
    design-token("color.gray.050")
  );
  @include component-token(
    "data-grid",
    "header-text",
    design-token("color.blue.800")
  );
}

.cell {
  display: inline-flex;
  align-items: center;
  padding: 0 design-token("space.2");

  &:first-child {
    padding-left: design-token("space.5");
  }
  &:last-child {
    padding-right: design-token("space.5");
  }

  @include font-style("body1");
  background: component-token("data-grid", "cell-bg");
  color: component-token("data-grid", "cell-text");
  height: component-token("data-grid", "body-row-height");
  z-index: component-token("data-grid", "cell-z-index");
}

.cellFocused {
  @include native-focus-ring;
  outline-offset: -1px;
}

.cellExpanded {
  margin-bottom: component-token("data-grid", "expanded-row-height");
}

.hasRowActions {
  .cell {
    &:last-child {
      padding-left: design-token("space.0.5");
      padding-right: design-token("space.2");
      position: sticky;
      right: component-token("data-grid", "sticky-right-offset");
      z-index: component-token("data-grid", "cell-stuck-z-index");
    }
    &:nth-last-child(2) {
      padding-right: design-token("space.1.5");
    }
  }
  &.rightEdgeUnderScroll .cell:last-child::before {
    content: "";
    position: absolute;
    top: 0;
    right: 100%;
    height: 100%;
    width: component-token("data-grid", "sticky-shadow-size");
    background-image: linear-gradient(
      to left,
      component-token("data-grid", "sticky-shadow-color"),
      transparent
    );
    opacity: component-token("data-grid", "sticky-shadow-opacity");
  }
}

.cell:nth-child(1) {
  position: sticky;
  left: component-token("data-grid", "sticky-left-offset");
  z-index: component-token("data-grid", "cell-stuck-z-index");
}

.leftEdgeUnderScroll:not(.hasSelection):not(.hasExpansion) .cell:nth-child(1),
.leftEdgeUnderScroll.hasSelection .cell:nth-child(2),
.leftEdgeUnderScroll.hasExpansion .cell:nth-child(2) {
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 100%;
    height: 100%;
    width: component-token("data-grid", "sticky-shadow-size");
    background-image: linear-gradient(
      to right,
      component-token("data-grid", "sticky-shadow-color"),
      transparent
    );
    opacity: component-token("data-grid", "sticky-shadow-opacity");
  }
}

.hasSelection,
.hasExpansion {
  .cell:nth-child(1) {
    left: 0;
    padding-left: design-token("space.2");
    padding-right: design-token("space.1.5");
  }
  .cell:nth-child(2) {
    left: 44px;
    position: sticky;
    z-index: component-token("data-grid", "cell-stuck-z-index");
  }
  .cell {
    & + * {
      padding-left: 0;
    }
  }
}
