@use "../styles/common" as *;

@mixin base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: design-token("shape.border_radius.base");
  cursor: pointer;

  &:focus {
    box-shadow: theme-token("shadow.button");
    outline: none;
  }

  &:disabled {
    pointer-events: none;
  }
}

@mixin variantFilled {
  border: 0;
  background-color: component-token("button", "resting.color");
  color: component-token("button", "filled.font.color");

  &:focus {
    background-color: component-token("button", "hover.focus.color");
  }

  &:disabled {
    color: theme-token("color.text.inverse");
    background-color: theme-token("color.background.disabled");
  }

  &:link {
    text-decoration: none;
  }

  &:not(:disabled):active {
    color: component-token("button", "filled.active.font.color");
    background-color: component-token("button", "active.color");
    &:focus {
      box-shadow: none;
    }
  }

  &:hover:not(:disabled):not(:active) {
    background-color: component-token("button", "hover.focus.color");
  }
}

@mixin variantOutlined {
  background-color: transparent;
  border: design-token("shape.border_width.1") solid
    component-token("button", "resting.color");
  color: component-token("button", "resting.color");

  &:focus {
    border: design-token("shape.border_width.1") solid
      component-token("button", "hover.focus.color");
    color: component-token("button", "hover.focus.color");
  }

  &:disabled {
    color: theme-token("color.text.disabled");
    border: design-token("shape.border_width.1") solid
      theme-token("color.border.disabled");
  }

  &:link {
    text-decoration: none;
  }

  &:active:not(:disabled) {
    color: component-token("button", "active.color");
    border: design-token("shape.border_width.1") solid
      component-token("button", "active.color");
    &:focus {
      box-shadow: none;
    }
  }

  &:hover:not(:disabled):not(:active) {
    border: design-token("shape.border_width.1") solid
      component-token("button", "hover.focus.color");
    color: component-token("button", "hover.focus.color");
  }
}

@mixin variantLink {
  color: component-token("button", "resting.color");
  background-color: transparent;
  border: design-token("shape.border_width.1") solid transparent;
  text-decoration: underline;

  &:focus {
    border: design-token("shape.border_width.1") solid
      component-token("button", "hover.focus.color");
  }

  &:disabled {
    color: theme-token("color.text.disabled");
  }

  &:active:not(:disabled) {
    color: component-token("button", "active.color");
  }

  &:hover:not(:disabled):not(:active) {
    color: component-token("button", "hover.focus.color");
  }
}

// prettier-ignore
@mixin colorPrimary {
  @include component-token("button", "filled.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "filled.active.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "resting.color", theme-token("color.background.primary"));
  @include component-token("button", "hover.focus.color", theme-token("color.background.primary.hovered"));
  @include component-token("button", "active.color", theme-token("color.background.primary.pressed"));
}

// prettier-ignore
@mixin colorSecondary {
  @include component-token("button", "filled.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "filled.active.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "resting.color", theme-token("color.background.secondary"));
  @include component-token("button", "hover.focus.color", theme-token("color.background.secondary.hovered"));
  @include component-token("button", "active.color", theme-token("color.background.secondary.pressed"));
}

// prettier-ignore
@mixin colorSuccess {
  @include component-token("button", "filled.font.color", theme-token("color.text.success.inverse"));
  @include component-token("button", "filled.active.font.color", theme-token("color.text.success.inverse.pressed"));
  @include component-token("button", "resting.color", theme-token("color.background.success"));
  @include component-token("button", "hover.focus.color", theme-token("color.background.success.hovered"));
  @include component-token("button", "active.color", theme-token("color.background.success.pressed"));
}

// prettier-ignore
@mixin colorWarning {
  @include component-token("button", "filled.font.color",theme-token("color.text.danger.inverse"));
  @include component-token("button", "filled.active.font.color",theme-token("color.text.danger.inverse.pressed"));
  @include component-token("button", "resting.color",theme-token("color.background.danger"));
  @include component-token("button", "hover.focus.color",theme-token("color.background.danger.hovered"));
  @include component-token("button", "active.color",theme-token("color.background.danger.pressed"));
}

// prettier-ignore
@mixin colorNeutral {
  @include component-token("button", "filled.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "filled.active.font.color", theme-token("color.text.inverse"));
  @include component-token("button", "resting.color", theme-token("color.background.neutral"));
  @include component-token("button", "hover.focus.color", theme-token("color.background.neutral.hovered"));
  @include component-token("button", "active.color", theme-token("color.background.neutral.pressed"));
}

// prettier-ignore
@mixin colorSupport {
  @include component-token("button", "resting.color", theme-token("color.border.support"));
  @include component-token("button", "hover.focus.color", theme-token("color.border.support.hovered"));
  @include component-token("button", "active.color", theme-token("color.border.support.pressed"));
}

// prettier-ignore
@mixin colorInverse {
  @include component-token("button", "resting.color", theme-token("color.border.inverse"));
  @include component-token("button", "hover.focus.color", theme-token("color.border.inverse.hovered"));
  @include component-token("button", "active.color", theme-token("color.border.inverse.pressed"));
}
