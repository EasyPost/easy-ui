@use "../styles/common" as *;
@use "./mixins" as Stepper;

.containerHorizontal {
  @include component-token("step-button", "max-height", 56px);
  padding: design-token("space.0") design-token("space.1");
  @include Stepper.breakpoint-fold-up {
    padding: design-token("space.2");
  }
}

.containerVertical {
  @include component-token("step-button", "max-height", 24px);
  padding: design-token("space.0");
}

.container {
  max-height: component-token("step-button", "max-height");
}

.colorPrimary {
  @include component-token(
    "step-button",
    "color-active",
    design-token("color.primary.500")
  );
  @include component-token(
    "step-button",
    "color-incomplete",
    design-token("color.neutral.500")
  );
  @include component-token(
    "step-button",
    "color-complete",
    design-token("color.primary.800")
  );
  @include component-token(
    "step-button",
    "active-background",
    design-token("color.primary.500")
  );
  @include component-token(
    "step-button",
    "incomplete-border",
    design-token("color.neutral.500")
  );
}

.colorInverse {
  @include component-token(
    "step-button",
    "color-active",
    design-token("color.neutral.000")
  );
  @include component-token(
    "step-button",
    "color-incomplete",
    design-token("color.neutral.000")
  );
  @include component-token(
    "step-button",
    "color-complete",
    design-token("color.neutral.000")
  );
  @include component-token(
    "step-button",
    "active-background",
    design-token("color.neutral.000")
  );
  @include component-token(
    "step-button",
    "incomplete-border",
    design-token("color.neutral.000")
  );
}

.StepButton {
  @include font-style("subtitle1");
  display: flex;
  align-items: center;
  gap: design-token("space.1");
  outline: none;
  cursor: pointer;

  &:disabled {
    cursor: not-allowed;
  }
}

.focusVisible {
  @include native-focus-ring;
}

.statusComplete {
  color: component-token("step-button", "color-complete");
}

.statusIncomplete {
  color: component-token("step-button", "color-incomplete");
}

.statusActive {
  color: component-token("step-button", "color-active");
}

.orientationVertical {
  margin-left: calc(-1 * #{design-token("space.0.25")});
}

.indicatorHorizontal {
  @include component-token("step-button", "indicator-size", 20px);
}

.indicatorVertical {
  @include component-token("step-button", "indicator-size", 16px);
}

.indicatorContainer {
  padding: design-token("space.0.25");
}

.indicatorActive {
  background-color: component-token("step-button", "active-background");
}

.indicatorVertical.indicatorActive {
  margin: design-token("space.0.5") design-token("space.0");
}

.indicatorIncomplete {
  border: 1px solid component-token("step-button", "incomplete-border");
}

.indicator {
  height: component-token("step-button", "indicator-size");
  width: component-token("step-button", "indicator-size");
  border-radius: 50%;
}

.textHorizontal {
  display: none;
  @include Stepper.breakpoint-fold-up {
    display: inline;
  }
}

.textVertical {
  display: inline;
}
